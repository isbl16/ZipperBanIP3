package {		/* IMPORTS */	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.net.FileReference;	import flash.geom.Rectangle;	import flash.display.Loader;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.net.URLRequest;	import flash.media.Camera;    import flash.media.Video;	import flash.text.TextFormat;	import com.adobe.images.JPGEncoder;	import flash.utils.ByteArray;	import flash.net.URLLoader;	/* face recognition library by Oskar Wicha (https://code.google.com/p/face-recognition-library-as3/) */	import com.oskarwicha.images.FaceDetection.Events.FaceDetectorEvent;	import com.oskarwicha.images.FaceRecognition.FaceRecognizer;	import com.oskarwicha.images.FaceRecognition.Events.FaceEvent;	import com.oskarwicha.images.FaceRecognition.Events.FaceRecognizerEvent;	import com.oskarwicha.images.FaceRecognition.Face;	import fl.controls.Button;	import flash.events.KeyboardEvent;		public class FaceRecognition extends Sprite {			/* VARIABLES */		//private var promptTxt:TextField;		private var recognizer:FaceRecognizer;		private var bmpData:BitmapData;		private var cam:Camera;		private var video_es:Video;		private var screenS:BitmapData;		private var saveCount:Number;		private var listOfTrained:Array;		private var listOfTrainedImgs:Vector.<String>;		private var listOfTrainedNames:Vector.<String>;		private var startBtn:Button;		private var probing:Boolean;		private var trainListLoader:URLLoader;		/* CONSTRUCTOR */			public function FaceRecognition() {			init();		}				private function init():void {			/* Instanciating variables */			//promptTxt = new TextField();			recognizer = new FaceRecognizer();			startBtn = new Button();			listOfTrained = new Array();			listOfTrainedImgs = new Vector.<String>();			listOfTrainedNames = new Vector.<String>();			trainListLoader = new URLLoader();			/* Adding event listeners */			trainBtn.addEventListener( MouseEvent.CLICK, beginTrain);			exitTrainBtn.addEventListener( MouseEvent.CLICK, exitTrain);			startBtn.addEventListener(MouseEvent.CLICK, beginProbe);			trainListLoader.addEventListener(Event.COMPLETE, onLoaded);			/* Initialising variables */			promptTxt.text = "Enter name above and register face";			saveCount = 1;			startBtn.label = "START";			startBtn.x = (stage.stageWidth/2) - (startBtn.width/2) - 50;			startBtn.y = ( stage.stageHeight - startBtn.height ) / 2;			startBtn.width = 200;			startBtn.height = 80;			feedbackTxt.text = "";							trainListLoader.load(new URLRequest("db.txt")); //loads the faces and names to be trained						removeChild(snapBtn);			removeChild(exitTrainBtn);			addChild(promptTxt);					}				/* Parses the list of images and faces to be trained and adds to arrays */		private function onLoaded(e:Event):void {			listOfTrained = e.target.data.split(/\n/);			for (var i = 0; i < listOfTrained.length - 1; i++) {				listOfTrainedImgs[i] = listOfTrained[i].split(' ')[0];				listOfTrainedNames[i] = listOfTrained[i].split(' ')[1];			}		}				private function beginTrain(e:Event):void {			if (nameInput.text == 'Enter name') {				/* User must enter a name. Essential for identification process. */				feedbackTxt.text = "Please enter a name";			} else {				removeChild(trainBtn);				removeChild(nameInput);				addChild(snapBtn);				if (6 - saveCount < 0) {					// photos to be taken already at 0. Cannot go negative.					feedbackTxt.text = '0 photos to take';				} else {					feedbackTxt.text = (6 - saveCount) + ' photos to take';				}				setUpCamera();				snapBtn.addEventListener(MouseEvent.CLICK, takePhoto); 				if (!probing) {					//prompt text not required when probing aka detecting					promptTxt.text = "Hi " + nameInput.text + "! Take 5 photos of face";				}			}		}				/* Sets up live camera stream */		private function setUpCamera():void {			cam = Camera.getCamera();			cam.setMode(stage.stageWidth/2,stage.stageHeight/2,30);			video_es = new Video(cam.width, cam.height);			video_es.attachCamera(cam); 			screenS = new BitmapData(cam.width, cam.height); 			video_es.x = (stage.stageWidth - video_es.width)/2;			video_es.y = 50;			addChild(video_es);		}				/* Take photo for registration. Must save photo in the trainingImg folder. */		function takePhoto(e:Event):void { 			feedbackTxt.text = (5 - saveCount) + ' photos to take';			/* Take and save photo */			screenS.draw(video_es) ;				var jpgEncoder:JPGEncoder = new JPGEncoder(); //encode into right format			var byteArray:ByteArray = jpgEncoder.encode(screenS);			var fileReference:FileReference=new FileReference();			var fileName:String = nameInput.text + saveCount + ".jpg";			fileReference.save(byteArray,  fileName);				saveCount++;			if (saveCount == 6) {				//No more to be saved				addChild(exitTrainBtn);				removeChild(snapBtn);				promptTxt.text = "You may now exit registration";			}			/* push just-added images and name into arrays */			listOfTrainedImgs.push("trainingImg/" + fileName);			listOfTrainedNames.push(nameInput.text);		}				/* Exit photo taking and let the system train with images */		private function exitTrain(e:Event):void {			removeChild(video_es);			removeChild(promptTxt);			removeChild(exitTrainBtn);			feedbackTxt.text = 'Loading...';			saveCount = 1;			trace(listOfTrainedImgs);			recognizer.loadTrainingFaces(listOfTrainedNames, listOfTrainedImgs); //load images and names			recognizer.addEventListener(FaceRecognizerEvent.LOADED_TRAINING_FACES, train); //train system to recognise faces			recognizer.addEventListener(FaceRecognizerEvent.TRAINED, startDetect); //start detecting		}				private function startDetect(e:Event):void {			addChild(startBtn);			addChild(promptTxt);			promptTxt.text = "Click START to begin";			feedbackTxt.text = '';		}				/* Listening for unzip or key press */		private function beginProbe(e:Event):void {			promptTxt.text = "You may unzip the bag (or press any key)";			removeChild(startBtn);			setUpCamera();			stage.addEventListener(KeyboardEvent.KEY_DOWN, createSnapshot);			probing = true;		}		//		private function alert(e:Event):void {//			snapProbe(e);//		}				/* Creates snapshot of camera stream and loads image */		private function createSnapshot(e:Event):void {			screenS.draw(video_es);				var jpgEncoder:JPGEncoder = new JPGEncoder();			var byteArray:ByteArray = jpgEncoder.encode(screenS);			var ldr:Loader = new Loader();			ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, detectFace);			ldr.loadBytes(byteArray);		}		/* Detect face in snapshot. Compares with owner's face */		private function detectFace(e:Event) {			// gather image data			bmpData = e.target.content.bitmapData;			var bmVis = new Bitmap(bmpData);			// create new face for analysing			var newFace:Face = new Face();			newFace.loadFaceImageFromBitmap(bmVis);			// analyse face			var anotherFace:Face = recognizer.probe(newFace);			// classification is the person's name			feedbackTxt.text = "Recognized as: " + anotherFace.classification + "\n";			if (anotherFace.classification != nameInput.text) {				feedbackTxt.appendText("***ACCESS DENIED***");				feedbackTxt.textColor = 0xff0000;			} else {				feedbackTxt.appendText("***ACCESS GRANTED***");				feedbackTxt.textColor = 0x3ff000;			}					}				/* Uses facial recognition library to train system with images and names */		private function train(e:Event):void {			recognizer.train(10);		}	}}